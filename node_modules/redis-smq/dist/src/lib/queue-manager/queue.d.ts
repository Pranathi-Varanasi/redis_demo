import { EQueueType, IRequiredConfig, TQueueParams, TQueueSettings } from '../../../types';
import { RedisClient } from 'redis-smq-common';
import { ICallback, ICompatibleLogger } from 'redis-smq-common/dist/types';
export declare class Queue {
    protected config: IRequiredConfig;
    protected redisClient: RedisClient;
    protected logger: ICompatibleLogger;
    constructor(config: IRequiredConfig, redisClient: RedisClient, logger: ICompatibleLogger);
    create(queue: string | TQueueParams, priorityQueuing: boolean, cb: ICallback<{
        queue: TQueueParams;
        settings: TQueueSettings;
    }>): void;
    save(queue: string | TQueueParams, queueType: EQueueType, cb: ICallback<{
        queue: TQueueParams;
        settings: TQueueSettings;
    }>): void;
    getSettings(queue: string | TQueueParams, cb: ICallback<TQueueSettings>): void;
    exists(queue: string | TQueueParams, cb: ICallback<boolean>): void;
    list(cb: ICallback<TQueueParams[]>): void;
    delete(queue: string | TQueueParams, cb: ICallback<void>): void;
    static getParams(config: IRequiredConfig, queue: string | TQueueParams): TQueueParams;
    static parseSettings(raw: Record<string, string>): TQueueSettings;
    static getSettings(config: IRequiredConfig, redisClient: RedisClient, queue: string | TQueueParams, cb: ICallback<TQueueSettings>): void;
    static list(redisClient: RedisClient, cb: ICallback<TQueueParams[]>): void;
    static exists(config: IRequiredConfig, redisClient: RedisClient, queue: string | TQueueParams, cb: ICallback<boolean>): void;
}
